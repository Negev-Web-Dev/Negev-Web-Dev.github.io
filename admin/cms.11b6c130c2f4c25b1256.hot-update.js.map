{"version":3,"file":"cms.11b6c130c2f4c25b1256.hot-update.js","sources":["webpack:///./src/templates/SinglePost.js"],"sourcesContent":["import React, {Fragment} from 'react'\nimport _get from 'lodash/get'\nimport { Link, graphql } from 'gatsby'\nimport { ChevronLeft } from 'react-feather'\n\nimport Content from '../components/Content'\nimport Layout from '../components/Layout'\nimport './SinglePost.css'\nimport Comment from \"../components/Comment\";\n\nexport const SinglePostTemplate = ({\n  title,\n  date,\n  body,\n  nextPostURL,\n  prevPostURL,\n  categories = []\n}) => {\n  return (\n    <main>\n      <article\n        className=\"SinglePost section light\"\n        itemScope\n        itemType=\"http://schema.org/BlogPosting\"\n      >\n        <div className=\"container skinny\">\n          <Link className=\"SinglePost--BackButton\" to=\"/blog/\">\n            <ChevronLeft /> BACK\n          </Link>\n          <div className=\"SinglePost--Content relative\">\n            <div className=\"SinglePost--Meta\">\n              {date && (\n                <time\n                  className=\"SinglePost--Meta--Date\"\n                  itemProp=\"dateCreated pubdate datePublished\"\n                  date={date}\n                >\n                  {date}\n                </time>\n              )}\n              {categories && (\n                <Fragment>\n                  <span>|</span>\n                  {categories.map((cat, index) => (\n                    <span\n                      key={cat.category}\n                      className=\"SinglePost--Meta--Category\"\n                    >\n                    {cat.category}\n                      {/* Add a comma on all but last category */}\n                      {index !== categories.length - 1 ? ',' : ''}\n                  </span>\n                  ))}\n                </Fragment>\n              )}\n            </div>\n\n            {title && (\n              <h1 className=\"SinglePost--Title\" itemProp=\"title\">\n                {title}\n              </h1>\n            )}\n\n            <div className=\"SinglePost--InnerContent\">\n              <Content source={body} />\n            </div>\n\n            <div className=\"SinglePost--Pagination\">\n              {prevPostURL && (\n                <Link\n                  className=\"SinglePost--Pagination--Link prev\"\n                  to={prevPostURL}\n                >\n                  Previous Post\n                </Link>\n              )}\n              {nextPostURL && (\n                <Link\n                  className=\"SinglePost--Pagination--Link next\"\n                  to={nextPostURL}\n                >\n                  Next Post\n                </Link>\n              )}\n            </div>\n          </div>\n        </div>\n\n        <Comment />\n      </article>\n    </main>\n  )\n}\n\n// Export Default SinglePost for front-end\nconst SinglePost = ({ data: { post, allPosts } }) => {\n  const thisEdge = allPosts.edges.find(edge => edge.node.id === post.id)\n  return (\n    <Layout\n      meta={post.frontmatter.meta || false}\n      title={post.frontmatter.title || false}\n    >\n      <SinglePostTemplate\n        {...post}\n        {...post.frontmatter}\n        body={post.html}\n        nextPostURL={_get(thisEdge, 'next.fields.slug')}\n        prevPostURL={_get(thisEdge, 'previous.fields.slug')}\n      />\n    </Layout>\n  )\n}\n\nexport default SinglePost\n\nexport const pageQuery = graphql`\n  ## Query for SinglePost data\n  ## Use GraphiQL interface (http://localhost:8000/___graphql)\n  ## $id is processed via gatsby-node.js\n  ## query name must be unique to this file\n  query SinglePost($id: String!) {\n    post: markdownRemark(id: { eq: $id }) {\n      ...Meta\n      html\n      id\n      frontmatter {\n        title\n        template\n        subtitle\n        date(formatString: \"MMMM Do, YYYY\")\n        categories {\n          category\n        }\n      }\n    }\n\n    allPosts: allMarkdownRemark(\n      filter: { fields: { contentType: { eq: \"posts\" } } }\n      sort: { order: DESC, fields: [frontmatter___date] }\n    ) {\n      edges {\n        node {\n          id\n        }\n        next {\n          fields {\n            slug\n          }\n          frontmatter {\n            title\n          }\n        }\n        previous {\n          fields {\n            slug\n          }\n          frontmatter {\n            title\n          }\n        }\n      }\n    }\n  }\n`\n"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AAOA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AACA;AACA;AAHA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAKA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAGA;AACA;AACA;AAHA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AASA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAEA;AACA;AAFA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AADA;AAeA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAKA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAGA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAGA;AACA;AAFA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AASA;AACA;AAFA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAWA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAIA;AACA;AAEA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AAEA;AACA;AAFA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAOA;AACA;AACA;AALA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AASA;AACA;AACA;AAAA;AAEA;;;;;;;;;;AAzGA;AAqFA;AAoBA;;;;;;;;;;;;;;A","sourceRoot":""}