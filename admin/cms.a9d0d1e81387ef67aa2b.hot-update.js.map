{"version":3,"file":"cms.a9d0d1e81387ef67aa2b.hot-update.js","sources":["webpack:///./src/components/Content.js"],"sourcesContent":["import React from 'react'\nimport ReactDOMServer from 'react-dom/server'\nimport Marked from 'react-markdown'\nimport PropTypes from 'prop-types'\nimport Image from './Image'\n\nimport './Content.css'\n\nconst encodeMarkdownURIs = (source = '') => {\n  const markdownLinkRegex = /\\[(.+)\\]\\((.+)(\".+)\\)/g\n\n  return source.replace(markdownLinkRegex, (match, linkURI) => {\n    if (!linkURI) return match\n    const replaced = match.replace(linkURI, encodeURI(linkURI))\n    return replaced\n  })\n}\n\nconst withContentImages = source => {\n  const images = source.match(/<img(.*?)\\\\?>/gim)\n\n  for (let i in images) {\n    const src = /src=\"(.*?)\"/g.exec(images[i]),\n      alt = /alt=\"(.*?)\"/g.exec(images[i]),\n      title = /title=\"(.*?)\"/g.exec(images[i])\n    source = source.replace(\n      images[i],\n      ReactDOMServer.renderToStaticMarkup(\n        <Image\n          resolutions=\"medium\"\n          className=\"Content--Image\"\n          lazy={false}\n          src={src ? src[1] : null}\n          alt={alt ? alt[1] : null}\n          title={title ? title[1] : null}\n        />\n      )\n    )\n  }\n\n  return source\n}\n\nconst MyImage = ({ nodeKey, src, title, alt }) => {\n  const decodedSrc = decodeURI(src)\n  return (\n    <Image\n      className=\"Content--Image markdown-preview\"\n      resolutions=\"medium\"\n      lazy={false}\n      src={decodedSrc}\n      title={title}\n      alt={alt}\n    />\n  )\n}\n\nconst HtmlBlock = ({ value }) => {\n  if (value.indexOf('<iframe') !== 0) return value\n  return (\n    <div\n      className={`Content--Iframe`}\n      dangerouslySetInnerHTML={{\n        __html: value\n      }}\n    />\n  )\n}\n\nconst Content = ({ source, src, className = '' }) => {\n  // accepts either html or markdown\n  source = source || src || ''\n  if (source.match(/^</)) {\n    source = withContentImages(source)\n\n    return (\n      <div\n        className={`Content ${className}`}\n        dangerouslySetInnerHTML={{ __html: source }}\n      />\n    )\n  }\n\n  return (\n    <Marked\n      className={`Content ${className}`}\n      source={encodeMarkdownURIs(source)}\n      renderers={{\n        image: MyImage,\n        html: HtmlBlock\n      }}\n    />\n  )\n}\n\nContent.propTypes = {\n  source: PropTypes.string,\n  src: PropTypes.string,\n  className: PropTypes.string\n}\n\nexport default Content\n"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAAA;AAAA;AAAA;AACA;AAAA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AAGA;AAIA;AACA;AACA;AACA;AACA;AACA;AANA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAUA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AANA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AASA;AACA;AACA;AAAA;AACA;AACA;AAEA;AACA;AACA;AADA;AAFA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAOA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AAAA;AACA;AAEA;AAEA;AACA;AAAA;AAAA;AAFA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAKA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAFA;AAHA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AASA;AACA;AACA;AACA;AACA;AACA;AAHA;AAMA;AAAA;;;;;;;;;;AA7FA;AAUA;AAyBA;AAcA;AAYA;;;;;;;;;;;;;;A","sourceRoot":""}