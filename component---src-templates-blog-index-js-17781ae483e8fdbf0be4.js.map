{"version":3,"sources":["webpack:///./src/components/PostCard.js","webpack:///./src/components/PostSection.js","webpack:///./src/components/BlogSearch.js","webpack:///./src/components/PostCategoriesNav.js","webpack:///./src/templates/BlogIndex.js"],"names":["PostCard","featuredImage","title","excerpt","slug","categories","className","to","Image","background","src","alt","map","cat","category","join","PostSection","state","limit","props","increaseLimit","setState","prevState","perPageLimit","render","this","posts","showLoadMore","loadMoreTitle","visiblePosts","slice","length","post","index","key","onClick","React","Component","defaultProps","pageCount","location","search","qs","parse","replace","type","value","s","placeholder","onChange","e","target","stringify","url","href","origin","navigate","PostCategoriesNav","enableSearch","exact","BlogSearch","byDate","now","Date","filter","date","byCategory","contentType","BlogIndexTemplate","subtitle","postCategories","filteredPosts","queryObj","searchTerm","toLowerCase","frontmatter","includes","PageHeader","backgroundImage","pageQuery","BlogIndex","data","page","Layout","meta","fields","edges","node"],"mappings":"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","file":"component---src-templates-blog-index-js-17781ae483e8fdbf0be4.js","sourcesContent":["import React from 'react'\nimport { Link } from 'gatsby'\n\nimport Image from './Image'\nimport './PostCard.css'\n\nconst PostCard = ({\n  featuredImage,\n  title,\n  excerpt,\n  slug,\n  categories = [],\n  className = '',\n  ...props\n}) => (\n  <Link to={slug} className={`PostCard ${className}`}>\n    {featuredImage && (\n      <div className=\"PostCard--Image relative\">\n        <Image background src={featuredImage} alt={title} />\n      </div>\n    )}\n    <div className=\"PostCard--Content\">\n      {title && <h3 className=\"PostCard--Title\">{title}</h3>}\n      <div className=\"PostCard--Category\">\n        {categories && categories.map(cat => cat.category).join(', ')}\n      </div>\n      {excerpt && <div className=\"PostCard--Excerpt\">{excerpt}</div>}\n    </div>\n  </Link>\n)\n\nexport default PostCard\n","import React from 'react'\n\nimport PostCard from '../components/PostCard'\nimport './PostSection.css'\n\nclass PostSection extends React.Component {\n  static defaultProps = {\n    posts: [],\n    title: '',\n    limit: 12,\n    showLoadMore: true,\n    loadMoreTitle: 'Load More',\n    perPageLimit: 12\n  }\n\n  state = {\n    limit: this.props.limit\n  }\n\n  increaseLimit = () =>\n    this.setState(prevState => ({\n      limit: prevState.limit + this.props.perPageLimit\n    }))\n\n  render() {\n    const { posts, title, showLoadMore, loadMoreTitle } = this.props,\n      { limit } = this.state,\n      visiblePosts = posts.slice(0, limit || posts.length)\n\n    return (\n      <div className=\"PostSection\">\n        {title && <h2 className=\"PostSection--Title\">{title}</h2>}\n        {!!visiblePosts.length && (\n          <div className=\"PostSection--Grid\">\n            {visiblePosts.map((post, index) => (\n              <PostCard key={post.title + index} {...post} />\n            ))}\n          </div>\n        )}\n        {showLoadMore && visiblePosts.length < posts.length && (\n          <div className=\"taCenter\">\n            <button className=\"button\" onClick={this.increaseLimit}>\n              {loadMoreTitle}\n            </button>\n          </div>\n        )}\n      </div>\n    )\n  }\n}\n\nexport default PostSection\n","import React from 'react'\nimport { navigate } from 'gatsby'\nimport { Location } from '@reach/router'\nimport qs from 'qs'\n\nexport default ({ pageCount }) => {\n  return (\n    <Location>\n      {({ location }) => {\n        let search = qs.parse(location.search.replace('?', ''))\n\n        return (\n          <input\n            type=\"text\"\n            value={search.s || ''}\n            placeholder=\"Search...\"\n            onChange={e => {\n              let search = {}\n              search.s = e.target.value\n              search = qs.stringify(search)\n\n              const url = location.href\n                .replace(location.origin, '')\n                .replace(location.search, '')\n\n              navigate(`${url}?${search}`)\n            }}\n          />\n        )\n      }}\n    </Location>\n  )\n}\n","import React from 'react'\nimport { Link } from 'gatsby'\n\nimport BlogSearch from './BlogSearch'\nimport './PostCategoriesNav.css'\n\nconst PostCategoriesNav = ({ categories, enableSearch }) => (\n  <div className=\"PostCategoriesNav\">\n    <Link className=\"NavLink\" exact=\"true\" to={`/blog/`}>\n      All\n    </Link>\n    {categories.map((category, index) => (\n      <Link\n        exact=\"true\"\n        className=\"NavLink\"\n        key={category.title + index}\n        to={category.slug}\n      >\n        {category.title}\n      </Link>\n    ))}\n\n    {enableSearch && <BlogSearch />}\n  </div>\n)\n\nexport default PostCategoriesNav\n","import React from 'react'\nimport { graphql } from 'gatsby'\nimport { Location } from '@reach/router'\nimport qs from 'qs'\n\nimport PageHeader from '../components/PageHeader'\nimport PostSection from '../components/PostSection'\nimport PostCategoriesNav from '../components/PostCategoriesNav'\nimport Layout from '../components/Layout'\n\n/**\n * Filter posts by date. Feature dates will be fitered\n * When used, make sure you run a cronejob each day to show schaduled content. See docs\n *\n * @param {posts} object\n */\nexport const byDate = posts => {\n  const now = Date.now()\n  return posts.filter(post => Date.parse(post.date) <= now)\n}\n\n/**\n * filter posts by category.\n *\n * @param {posts} object\n * @param {title} string\n * @param {contentType} string\n */\nexport const byCategory = (posts, title, contentType) => {\n  const isCategory = contentType === 'postCategories'\n  const byCategory = post =>\n    post.categories &&\n    post.categories.filter(cat => cat.category === title).length\n  return isCategory ? posts.filter(byCategory) : posts\n}\n\n// Export Template for use in CMS preview\nexport const BlogIndexTemplate = ({\n  title,\n  subtitle,\n  featuredImage,\n  posts = [],\n  postCategories = [],\n  enableSearch = true,\n  contentType\n}) => (\n  <Location>\n    {({ location }) => {\n      let filteredPosts =\n        posts && !!posts.length\n          ? byCategory(byDate(posts), title, contentType)\n          : []\n\n      let queryObj = location.search.replace('?', '')\n      queryObj = qs.parse(queryObj)\n\n      if (enableSearch && queryObj.s) {\n        const searchTerm = queryObj.s.toLowerCase()\n        filteredPosts = filteredPosts.filter(post =>\n          post.frontmatter.title.toLowerCase().includes(searchTerm)\n        )\n      }\n\n      return (\n        <main className=\"Blog\">\n          <PageHeader\n            title={title}\n            subtitle={subtitle}\n            backgroundImage={featuredImage}\n          />\n\n          {!!postCategories.length && (\n            <section className=\"section thin\">\n              <div className=\"container\">\n                <PostCategoriesNav enableSearch categories={postCategories} />\n              </div>\n            </section>\n          )}\n\n          {!!posts.length && (\n            <section className=\"section\">\n              <div className=\"container\">\n                <PostSection posts={filteredPosts} />\n              </div>\n            </section>\n          )}\n        </main>\n      )\n    }}\n  </Location>\n)\n\n// Export Default BlogIndex for front-end\nconst BlogIndex = ({ data: { page, posts, postCategories } }) => (\n  <Layout\n    meta={page.frontmatter.meta || false}\n    title={page.frontmatter.title || false}\n  >\n    <BlogIndexTemplate\n      {...page}\n      {...page.fields}\n      {...page.frontmatter}\n      posts={posts.edges.map(post => ({\n        ...post.node,\n        ...post.node.frontmatter,\n        ...post.node.fields\n      }))}\n      postCategories={postCategories.edges.map(post => ({\n        ...post.node,\n        ...post.node.frontmatter,\n        ...post.node.fields\n      }))}\n    />\n  </Layout>\n)\n\nexport default BlogIndex\n\nexport const pageQuery = graphql`\n  ## Query for BlogIndex data\n  ## Use GraphiQL interface (http://localhost:8000/___graphql)\n  ## $id is processed via gatsby-node.js\n  ## query name must be unique to this file\n  query BlogIndex($id: String!) {\n    page: markdownRemark(id: { eq: $id }) {\n      ...Meta\n      fields {\n        contentType\n      }\n      frontmatter {\n        title\n        excerpt\n        template\n        subtitle\n        featuredImage\n      }\n    }\n\n    posts: allMarkdownRemark(\n      filter: { fields: { contentType: { eq: \"posts\" } } }\n      sort: { order: DESC, fields: [frontmatter___date] }\n    ) {\n      edges {\n        node {\n          excerpt\n          fields {\n            slug\n          }\n          frontmatter {\n            title\n            date\n            categories {\n              category\n            }\n            featuredImage\n          }\n        }\n      }\n    }\n    postCategories: allMarkdownRemark(\n      filter: { fields: { contentType: { eq: \"postCategories\" } } }\n      sort: { order: ASC, fields: [frontmatter___title] }\n    ) {\n      edges {\n        node {\n          fields {\n            slug\n          }\n          frontmatter {\n            title\n          }\n        }\n      }\n    }\n  }\n`\n"],"sourceRoot":""}