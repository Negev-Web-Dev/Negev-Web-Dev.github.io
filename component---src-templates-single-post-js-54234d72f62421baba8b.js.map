{"version":3,"sources":["webpack:///./node_modules/react-feather/dist/icons/chevron-left.js","webpack:///./src/components/Comment.js","webpack:///./src/templates/SinglePost.js"],"names":["_extends","Object","assign","target","i","arguments","length","source","key","prototype","hasOwnProperty","call","apply","this","_objectWithoutProperties","excluded","sourceKeys","keys","indexOf","_objectWithoutPropertiesLoose","getOwnPropertySymbols","sourceSymbolKeys","propertyIsEnumerable","ChevronLeft","_ref","ref","_ref$color","color","_ref$size","size","rest","createElement","xmlns","width","height","viewBox","fill","stroke","strokeWidth","strokeLinecap","strokeLinejoin","points","displayName","Comment","useEffect","script","document","async","src","setAttribute","scriptParentNode","getElementById","appendChild","removeChild","firstChild","id","SinglePostTemplate","title","date","body","nextPostURL","prevPostURL","categories","className","itemScope","itemType","to","itemProp","map","cat","index","category","Content","pageQuery","SinglePost","data","post","thisEdge","allPosts","edges","find","edge","node","Layout","meta","frontmatter","html","_get"],"mappings":"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","file":"component---src-templates-single-post-js-54234d72f62421baba8b.js","sourcesContent":["function _extends() {\n  _extends = Object.assign || function (target) {\n    for (var i = 1; i < arguments.length; i++) {\n      var source = arguments[i];\n\n      for (var key in source) {\n        if (Object.prototype.hasOwnProperty.call(source, key)) {\n          target[key] = source[key];\n        }\n      }\n    }\n\n    return target;\n  };\n\n  return _extends.apply(this, arguments);\n}\n\nfunction _objectWithoutProperties(source, excluded) {\n  if (source == null) return {};\n\n  var target = _objectWithoutPropertiesLoose(source, excluded);\n\n  var key, i;\n\n  if (Object.getOwnPropertySymbols) {\n    var sourceSymbolKeys = Object.getOwnPropertySymbols(source);\n\n    for (i = 0; i < sourceSymbolKeys.length; i++) {\n      key = sourceSymbolKeys[i];\n      if (excluded.indexOf(key) >= 0) continue;\n      if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue;\n      target[key] = source[key];\n    }\n  }\n\n  return target;\n}\n\nfunction _objectWithoutPropertiesLoose(source, excluded) {\n  if (source == null) return {};\n  var target = {};\n  var sourceKeys = Object.keys(source);\n  var key, i;\n\n  for (i = 0; i < sourceKeys.length; i++) {\n    key = sourceKeys[i];\n    if (excluded.indexOf(key) >= 0) continue;\n    target[key] = source[key];\n  }\n\n  return target;\n}\n\nimport React, { forwardRef } from 'react';\nvar ChevronLeft = forwardRef(function (_ref, ref) {\n  var _ref$color = _ref.color,\n      color = _ref$color === void 0 ? 'currentColor' : _ref$color,\n      _ref$size = _ref.size,\n      size = _ref$size === void 0 ? 24 : _ref$size,\n      rest = _objectWithoutProperties(_ref, [\"color\", \"size\"]);\n\n  return /*#__PURE__*/React.createElement(\"svg\", _extends({\n    ref: ref,\n    xmlns: \"http://www.w3.org/2000/svg\",\n    width: size,\n    height: size,\n    viewBox: \"0 0 24 24\",\n    fill: \"none\",\n    stroke: color,\n    strokeWidth: \"2\",\n    strokeLinecap: \"round\",\n    strokeLinejoin: \"round\"\n  }, rest), /*#__PURE__*/React.createElement(\"polyline\", {\n    points: \"15 18 9 12 15 6\"\n  }));\n});\nChevronLeft.displayName = 'ChevronLeft';\nexport default ChevronLeft;","import { useEffect } from 'react'\nimport React from 'react'\n\nconst commentNodeId = 'comments'\n\nconst Comment = () => {\n  useEffect(() => {\n    // docs - https://utteranc.es/\n    const script = document.createElement('script')\n    script.async = true\n    script.src = 'https://utteranc.es/client.js'\n    script.setAttribute('repo', 'Negev-Web-Dev/Negev-Web-Dev.github.io')\n    script.setAttribute('issue-term', 'pathname')\n    script.setAttribute('id', 'utterances')\n    script.setAttribute('label', 'comment :speech_balloon:')\n    script.setAttribute('theme', 'github-light')\n    script.setAttribute('crossorigin', 'anonymous')\n\n    const scriptParentNode = document.getElementById(commentNodeId)\n    scriptParentNode.appendChild(script)\n\n    return () => {\n      // cleanup - remove the older script with previous theme\n      scriptParentNode.removeChild(scriptParentNode.firstChild)\n    }\n  }, [])\n\n  return <div id={commentNodeId} />\n}\n\nexport default Comment\n","import React, { Fragment } from 'react'\nimport _get from 'lodash/get'\nimport { Link, graphql } from 'gatsby'\nimport { ChevronLeft } from 'react-feather'\n\nimport Content from '../components/Content'\nimport Layout from '../components/Layout'\nimport Comment from '../components/Comment'\nimport './SinglePost.css'\n\nexport const SinglePostTemplate = ({\n  title,\n  date,\n  body,\n  nextPostURL,\n  prevPostURL,\n  categories = []\n}) => {\n  return (\n    <main>\n      <article\n        className=\"SinglePost section light\"\n        itemScope\n        itemType=\"http://schema.org/BlogPosting\"\n      >\n        <div className=\"container skinny\">\n          <Link className=\"SinglePost--BackButton\" to=\"/blog/\">\n            <ChevronLeft /> BACK\n          </Link>\n          <div className=\"SinglePost--Content relative\">\n            <div className=\"SinglePost--Meta\">\n              {date && (\n                <time\n                  className=\"SinglePost--Meta--Date\"\n                  itemProp=\"dateCreated pubdate datePublished\"\n                  date={date}\n                >\n                  {date}\n                </time>\n              )}\n              {categories && (\n                <Fragment>\n                  <span>|</span>\n                  {categories.map((cat, index) => (\n                    <span\n                      key={cat.category}\n                      className=\"SinglePost--Meta--Category\"\n                    >\n                      {cat.category}\n                      {/* Add a comma on all but last category */}\n                      {index !== categories.length - 1 ? ',' : ''}\n                    </span>\n                  ))}\n                </Fragment>\n              )}\n            </div>\n\n            {title && (\n              <h1 className=\"SinglePost--Title\" itemProp=\"title\">\n                {title}\n              </h1>\n            )}\n\n            <div className=\"SinglePost--InnerContent\">\n              <Content source={body} />\n            </div>\n\n            <div className=\"SinglePost--Pagination\">\n              {prevPostURL && (\n                <Link\n                  className=\"SinglePost--Pagination--Link prev\"\n                  to={prevPostURL}\n                >\n                  Previous Post\n                </Link>\n              )}\n              {nextPostURL && (\n                <Link\n                  className=\"SinglePost--Pagination--Link next\"\n                  to={nextPostURL}\n                >\n                  Next Post\n                </Link>\n              )}\n            </div>\n          </div>\n        </div>\n      </article>\n    </main>\n  )\n}\n\n// Export Default SinglePost for front-end\nconst SinglePost = ({ data: { post, allPosts } }) => {\n  const thisEdge = allPosts.edges.find(edge => edge.node.id === post.id)\n  return (\n    <Layout\n      meta={post.frontmatter.meta || false}\n      title={post.frontmatter.title || false}\n    >\n      <SinglePostTemplate\n        {...post}\n        {...post.frontmatter}\n        body={post.html}\n        nextPostURL={_get(thisEdge, 'next.fields.slug')}\n        prevPostURL={_get(thisEdge, 'previous.fields.slug')}\n      />\n\n      <Comment />\n    </Layout>\n  )\n}\n\nexport default SinglePost\n\nexport const pageQuery = graphql`\n  ## Query for SinglePost data\n  ## Use GraphiQL interface (http://localhost:8000/___graphql)\n  ## $id is processed via gatsby-node.js\n  ## query name must be unique to this file\n  query SinglePost($id: String!) {\n    post: markdownRemark(id: { eq: $id }) {\n      ...Meta\n      html\n      id\n      frontmatter {\n        title\n        template\n        subtitle\n        date(formatString: \"MMMM Do, YYYY\")\n        categories {\n          category\n        }\n      }\n    }\n\n    allPosts: allMarkdownRemark(\n      filter: { fields: { contentType: { eq: \"posts\" } } }\n      sort: { order: DESC, fields: [frontmatter___date] }\n    ) {\n      edges {\n        node {\n          id\n        }\n        next {\n          fields {\n            slug\n          }\n          frontmatter {\n            title\n          }\n        }\n        previous {\n          fields {\n            slug\n          }\n          frontmatter {\n            title\n          }\n        }\n      }\n    }\n  }\n`\n"],"sourceRoot":""}